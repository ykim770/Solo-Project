* {
  background-color: rgb(243 238 229);
}
.delete-button {
  display: inline;
  background-color: rgb(227, 95, 95);
  border-radius: 25px;
  width: 25px;
  color: white;
  border-style: none;
  position: absolute;
  top: -12px;
  left: 1260px;
}
.delete-button:hover {
  cursor: pointer;
}
.task-container {
  text-align: center;
}
.task-submit {
  padding-left: 6px;
  background-color: white;
  width: 300px;
  border-radius: 12px;
  font-size: 24px;
  background-color: rgb(243, 243, 243);
}
.task-button {
  padding: 2px;
  border-radius: 8px;
  margin-right: 10px;
}
.task-button:hover {
  cursor: pointer;
}
.app-container {
  padding: 0px;
  margin: 0px;
  width: 100%;
}
.all-goal-container {
  margin-inline: auto;
  margin-block: 60px;
}
.main-goal {
  width: 100%;
  margin-block: 30px;
}
body {
  font-family: 'Roboto', sans-serif;
}
#new-goal {
  font-size: 24px;
  border-radius: 14px;
  padding-left: 6px;
  width: 300px;
  background-color: rgb(243, 243, 243);
}
.add-goal {
  border: none;
  background-color: rgb(83, 165, 83) !important;
  color: white;
  width: 36px;
  font-size: 24px;
  border-radius: 40px !important;
  margin-left: 10px;
}
.add-goal:hover {
  cursor: pointer;
}
.edit-form {
  background-color: inherit;
}
.edit-button {
  padding: 2px;
  border-radius: 8px;
}
.edit-button:hover {
  cursor: pointer;
}
.save-button {
  border-style: none;
  background-color: rgb(83, 165, 83);
  color: white;
  border-radius: 25px;
  width: 25px;
  margin-left: 6px;
}
.save-button:hover {
  cursor: pointer;
}
.goal-text {
  font-size: 24px;
  background-color: inherit;
}
.edit-goal {
  background-color: inherit;
  font-size: 24px;
  border: 2px solid rgb(100, 98, 98);
  border-radius: 8px;
  padding-right: 0px;
  padding-left: 4px;
  width: 400px;
}
.each-task {
  font-size: 20px;
  border-radius: 20px;
  margin-block: 15px;
  padding-inline: 20px;
  display: flex;
  background-color: rgb(243, 243, 243);
  height: 40px;
  width: 30%;
  align-items: center;
  margin-inline: auto;
  justify-content: space-between;
  border: 2px solid rgb(100, 98, 98);
}
.main-goal-wrapper {
  margin-inline: auto;
  position: relative;
  background-color: rgb(243, 243, 243);
  height: 60px;
  width: 50%;
  display: flex;
  align-items: center;
  justify-content: space-between;
  border: 2px solid rgb(100, 98, 98);
  border-radius: 20px;
  box-shadow: 6px 6px 4px rgb(173, 168, 168);
  margin-block: 15px;
  padding-inline: 20px;
}
h1 {
  font-family: 'Inter', sans-serif;
  font-size: 50px;
  text-align: center;
  color: rgb(218, 154, 85);
}
.form {
  text-align: center;
}
#goal-error {
  color: red;
}
/* CSS Reset */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Remove default margin */
* {
  margin: 0;
  padding: 0;
  font: inherit;
}

/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */
ul[role='list'],
ol[role='list'] {
  list-style: none;
}

/* Set core root defaults */
html:focus-within {
  scroll-behavior: smooth;
}
html,
body {
  height: 100%;
}
/* Set core body defaults */
body {
  text-rendering: optimizeSpeed;
  line-height: 1.5;
}

/* A elements that don't have a class get default styles */
a:not([class]) {
  text-decoration-skip-ink: auto;
}

/* Make images easier to work with */
img,
picture,
svg {
  max-width: 100%;
  display: block;
}

/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */
@media (prefers-reduced-motion: reduce) {
  html:focus-within {
    scroll-behavior: auto;
  }

  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

.container {
  /* The following are locally scoped custom properties that only apply to container */
  --max-width: 1110px;
  --padding: 1rem;
  /* Chooses between our var --max-width or 100% - 2rem */
  /* (var(--padding)*2)=2rem sets padding on each side to be 1 */
  width: min(var(--max-width), 100% - var(--padding) * 2);
  /* centers horizontally */
  margin-inline: auto;
}

.even-columns {
  display: grid;
  /* Value that corresponds to the gap between! columns/rows created by grid */
  gap: 1rem;
}

@media (min-width: 50em) {
  .even-columns {
    /* column is fully occupied first */
    grid-auto-flow: column;
    /* If this was grid-auto-flow: row -> each row would be fully occupied */
    grid-auto-columns: 1fr;
  }
}
